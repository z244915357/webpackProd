README
知识点
1.使用 postcss 处理浏览器css兼容性问题 需要使用postcss-loader 和 postcss-preset-env（用来帮助webpack寻找browerslist目标，目标定义在package.json文件中） 
当前使用5.3.0版本postcss-loader  遇到的问题
不能直接在webpack.config.js 文件中写处理，版本不兼容会报异常

解决方法
在根目录新建一个 postcss.config.js ，文件中写入下面代码
module.exports = {
    plugins:[
        require('postcss-preset-env')()
    ]
}

在进行打包指令打包时  会默认按生产环境进行css兼容性处理

在webpack.config.js中使用nodejs环境变量

process.env.NODE_ENV = 'development' 文件编译会按开发环境进行编译

2.css压缩插件的使用  optimize-css-assets-webpack-plugin 
使用方法 1.下载 2.引入 3.调用   
下载 npm i optimize-css-assets-webpack-plugin
具体使用方法在webpack.config.js中查看

3.eslint配置 设置源代码的检测 
下载依赖 eslint  eslint-loader   eslint-config-airbub-base eslint-plugin-import
在package.json文件中
  "eslintConfig": {
    "extends": "airbnb-base"
  }
在webpack.config,js文件中设置eslint-loader  

4.js兼容性处理使用  babel-loader  @babel/core 
常用于es语法处理  兼容ie浏览器  或者 处理特殊语法如 promise 类型函数
普通处理方式直接调用bable-loader
全部处理  使用@bable/polyfill 插件进行处理 使用基本处理配置 下载文件后直接在需要处理的js文件中引入即可，不需要其他配置
按需处理  第三种处理方式需要重新书写处理 使用 core-js 
如下

{
   test:/\.js$/,
                exclude:/node_modules/,
                loader:'babel-loader',
                options:{
                    presets:[
                        '@babel/preset-env',
                        {
                            // 按需加载
                            useBuiltIns:'usage',
                            // 制定core-js版本
                            corejs:{
                                version:3
                            },
                            // 指定兼容浏览器版本
                            targets:{
                                chrome:'60',
                                firefox:'60',
                                ie:'9',
                                safari:'10',
                                edge:'17'
                            }
                        }
                    ]
                }
}

5. 生产环境会打包会自动压缩html js 代码  modu:值设置成nodejs环境变量process.env.NODE_ENV 当项目打包时会根据不同环境进行不同的打包

